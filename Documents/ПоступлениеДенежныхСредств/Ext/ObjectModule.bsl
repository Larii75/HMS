///Copyright (c) 2021, https://github.com/Larii75.
///
///Разрешается повторное распространение и использование как в виде исходного кода, так и в двоичной форме, с изменениями или без, при соблюдении следующих условий:
///
///При повторном распространении исходного кода должно оставаться указанное выше уведомление об авторском праве, этот список условий и последующий отказ от гарантий.
///При повторном распространении двоичного кода должна сохраняться указанная выше информация об авторском праве, этот список условий и последующий отказ от гарантий 
///в документации и/или в других материалах, поставляемых при распространении. 
///Ни название <Организации>, ни имена её сотрудников не могут быть использованы в качестве поддержки или продвижения продуктов, основанных на этом ПО без предварительного письменного разрешения.
///ЭТА ПРОГРАММА ПРЕДОСТАВЛЕНА ВЛАДЕЛЬЦАМИ АВТОРСКИХ ПРАВ И/ИЛИ ДРУГИМИ СТОРОНАМИ «КАК ОНА ЕСТЬ» БЕЗ КАКОГО-ЛИБО ВИДА ГАРАНТИЙ, ВЫРАЖЕННЫХ ЯВНО ИЛИ ПОДРАЗУМЕВАЕМЫХ, ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ИМИ, 
///ПОДРАЗУМЕВАЕМЫЕ ГАРАНТИИ КОММЕРЧЕСКОЙ ЦЕННОСТИ И ПРИГОДНОСТИ ДЛЯ КОНКРЕТНОЙ ЦЕЛИ. 
///НИ В КОЕМ СЛУЧАЕ НИ ОДИН ВЛАДЕЛЕЦ АВТОРСКИХ ПРАВ И НИ ОДНО ДРУГОЕ ЛИЦО, КОТОРОЕ МОЖЕТ ИЗМЕНЯТЬ И/ИЛИ ПОВТОРНО РАСПРОСТРАНЯТЬ ПРОГРАММУ, КАК БЫЛО СКАЗАНО ВЫШЕ, НЕ НЕСЁТ ОТВЕТСТВЕННОСТИ,
///ВКЛЮЧАЯ ЛЮБЫЕ ОБЩИЕ, СЛУЧАЙНЫЕ, СПЕЦИАЛЬНЫЕ ИЛИ ПОСЛЕДОВАВШИЕ УБЫТКИ, ВСЛЕДСТВИЕ ИСПОЛЬЗОВАНИЯ ИЛИ НЕВОЗМОЖНОСТИ ИСПОЛЬЗОВАНИЯ ПРОГРАММЫ 
///(ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ПОТЕРЕЙ ДАННЫХ, ИЛИ ДАННЫМИ, СТАВШИМИ НЕПРАВИЛЬНЫМИ, ИЛИ ПОТЕРЯМИ, ПРИНЕСЕННЫМИ ИЗ-ЗА ВАС ИЛИ ТРЕТЬИХ ЛИЦ, 
///ИЛИ ОТКАЗОМ ПРОГРАММЫ РАБОТАТЬ СОВМЕСТНО С ДРУГИМИ ПРОГРАММАМИ), ДАЖЕ ЕСЛИ ТАКОЙ ВЛАДЕЛЕЦ ИЛИ ДРУГОЕ ЛИЦО БЫЛИ ИЗВЕЩЕНЫ О ВОЗМОЖНОСТИ ТАКИХ УБЫТКОВ.
///
///Copyright (c) 2021, https://github.com/Larii75 All rights reserved.
///
///Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
///
///Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
///Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
///Neither the name of the <ORGANIZATION> nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
///THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
///THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER 
///OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
///PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
///LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
///EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#Если Сервер ИЛИ ВнешнееСоединение Тогда

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Бронирование") Тогда
		ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
		ВалютаУчета = ДанныеЗаполнения.ВалютаУчета;
		МояОрганизация = ДанныеЗаполнения.МояОрганизация;
		Бронирование = ДанныеЗаполнения.Ссылка;
		ГостьИлиОрганизатор = ДанныеЗаполнения.Бронирующий;
		СуммаВВалютеДокумента = ДанныеЗаполнения.СуммаВВалютеДокумента;
		СуммаВВалютеУчета = ДанныеЗаполнения.СуммаВВалютеУчета;
	КонецЕсли;
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтоНовый() Тогда
		//TODO
		Если ВалютаДокумента = ВалютаУчета Тогда
			СуммаВВалютеУчета = СуммаВВалютеДокумента;
		Иначе
			Отказ = Истина;
			ВызватьИсключение("Функция в разработке!")
		КонецЕсли;

		СлужебнаяСсылка = Документы.ПоступлениеДенежныхСредств.ПолучитьСсылку(Новый УникальныйИдентификатор());
		УстановитьСсылкуНового(СлужебнаяСсылка);
	КонецЕсли;
		
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Для Каждого Движение Из Движения Цикл
		Движение.Записывать = Истина;
		Движение.Очистить();
		Движение.Записать();
		Движение.БлокироватьДляИзменения = Истина;
		Движение.Записывать = Истина;
	КонецЦикла;

	// регистр ОстаткиВзаиморасчетов Расход
	Движение = Движения.ОстаткиВзаиморасчетов.ДобавитьРасход();
	Движение.Бронирование = Бронирование;
	Движение.Период = Дата;
	Движение.МояОрганизация = МояОрганизация;
	Движение.Бронирующий = Бронирование.Бронирующий;
	Движение.ВалютаУчета = ВалютаУчета;
	Движение.СуммаВВалютеУчета = СуммаВВалютеУчета;
	
	// регистр ОборотыДоходыИРасходы
	Движение2 = Движения.ОборотыДоходыИРасходы.Добавить();
	Движение2.Период = Дата;
	Движение2.МояОрганизация = МояОрганизация;
	Движение2.СредствоРазмещения = Бронирование.СредствоРазмещения;
	Движение2.СтатьяАналитики = ПредопределенноеЗначение("Перечисление.СтатьиДоходов.ГостиничныеУслуги");
	Движение2.Бронирование = Бронирование;
	Движение2.ВалютаУчета = ВалютаУчета;
	Движение2.СуммаВВалютеУчета = СуммаВВалютеУчета;
	
	// регистр ОборотыОплатыБронирований
	Движение3 = Движения.ОборотыОплатыБронирований.Добавить();
	Движение3.Период = Дата;
	Движение3.Бронирование = Бронирование;
	Движение3.ВалютаУчета = ВалютаУчета;
	Движение3.СуммаВВалютеУчета = СуммаВВалютеУчета;

	///Проверяем остатки
	Для Каждого Движение Из Движения Цикл
		Движение.Записать();
	КонецЦикла;
	КонтрольОстатковПДС(Бронирование, Ссылка, Бронирование.Дата, ДополнительныеСвойства, Отказ);
		
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура КонтрольОстатковПДС(БронированиеСсылка, ОбъектСсылка, ПериодНачало, ДополнительныеСвойстваДляПроведения, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОборотыОплатыБронированийОбороты.Бронирование КАК Бронирование,
	               |	ОборотыОплатыБронированийОбороты.ВалютаУчета КАК ВалютаУчета,
	               |	ОборотыОплатыБронированийОбороты.СуммаВВалютеУчетаОборот КАК СуммаВВалютеУчетаОборот,
	               |	ВЫРАЗИТЬ(ОборотыОплатыБронированийОбороты.Регистратор КАК Документ.ВозвратДенежныхСредств).ПоступлениеДенежныхСредств КАК ПоступлениеДенежныхСредств
	               |ПОМЕСТИТЬ РезультатВиртуальнойТаблицы
	               |ИЗ
	               |	РегистрНакопления.ОборотыОплатыБронирований.Обороты(&Начало, , Регистратор, Бронирование = &Бронирование) КАК ОборотыОплатыБронированийОбороты
	               |ГДЕ
	               |	ОборотыОплатыБронированийОбороты.Регистратор ССЫЛКА Документ.ВозвратДенежныхСредств
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПРЕДСТАВЛЕНИЕССЫЛКИ(РезультатВиртуальнойТаблицы.Бронирование) КАК Бронирование,
	               |	РезультатВиртуальнойТаблицы.ВалютаУчета КАК ВалютаУчета,
	               |	РезультатВиртуальнойТаблицы.СуммаВВалютеУчетаОборот КАК СуммаВВалютеУчетаОборот,
	               |	РезультатВиртуальнойТаблицы.ПоступлениеДенежныхСредств КАК ПоступлениеДенежныхСредств
	               |ИЗ
	               |	РезультатВиртуальнойТаблицы КАК РезультатВиртуальнойТаблицы
	               |ГДЕ
	               |	РезультатВиртуальнойТаблицы.ПоступлениеДенежныхСредств = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОстаткиВзаиморасчетовОстатки.Бронирование) КАК Бронирование,
	               |	СУММА(ОстаткиВзаиморасчетовОстатки.СуммаВВалютеУчетаОстаток) КАК СуммаВВалютеУчетаОстаток
	               |ИЗ
	               |	РегистрНакопления.ОстаткиВзаиморасчетов.Остатки(
	               |			,
	               |			Бронирование = &Бронирование
	               |				И Бронирующий = &Бронирующий) КАК ОстаткиВзаиморасчетовОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОстаткиВзаиморасчетовОстатки.Бронирование)
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ОстаткиВзаиморасчетовОстатки.СуммаВВалютеУчетаОстаток) < 0";
	   
	Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
	Запрос.УстановитьПараметр("Бронирование", БронированиеСсылка);
	Запрос.УстановитьПараметр("Бронирующий", БронированиеСсылка.Бронирующий);
	Запрос.УстановитьПараметр("Начало", ПериодНачало);
	
	Пакет = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	Если НЕ ДополнительныеСвойстваДляПроведения.Свойство("ОтменаПроведения") Тогда
		ВыборкаОстаткиВзаиморасчетов = Пакет[2].Выбрать();
		Пока ВыборкаОстаткиВзаиморасчетов.Следующий() Цикл
			Отказ = Истина;
	   		Сообщить("По документу " + ВыборкаОстаткиВзаиморасчетов.Бронирование + " нарушается отражение взаиморасчетов!");
		КонецЦикла;
	Иначе
		ВыборкаОборотыВозврат = Пакет[1].Выбрать();
		Пока ВыборкаОборотыВозврат.Следующий() Цикл
			Отказ = Истина;
	   		Сообщить("По документу " + ВыборкаОборотыВозврат.Бронирование + " существует возврат денежных средств!");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры //КонтрольОстатковПДС()		

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Для Каждого Движение Из Движения Цикл
		Движение.Записывать = Истина;
		Движение.Записать();
		Движение.БлокироватьДляИзменения = Истина;
		Движение.Записывать = Истина;
	КонецЦикла;
	ДополнительныеСвойства.Вставить("ОтменаПроведения", Истина);
	КонтрольОстатковПДС(Бронирование, Ссылка, Бронирование.Дата, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

#Иначе

ВызватьИсключение("Недопустимый вызов объекта на клиенте!");

#КонецЕсли
