///Copyright (c) 2021, https://github.com/Larii75.
///
///Разрешается повторное распространение и использование как в виде исходного кода, так и в двоичной форме, с изменениями или без, при соблюдении следующих условий:
///
///При повторном распространении исходного кода должно оставаться указанное выше уведомление об авторском праве, этот список условий и последующий отказ от гарантий.
///При повторном распространении двоичного кода должна сохраняться указанная выше информация об авторском праве, этот список условий и последующий отказ от гарантий 
///в документации и/или в других материалах, поставляемых при распространении. 
///Ни название <Организации>, ни имена её сотрудников не могут быть использованы в качестве поддержки или продвижения продуктов, основанных на этом ПО без предварительного письменного разрешения.
///ЭТА ПРОГРАММА ПРЕДОСТАВЛЕНА ВЛАДЕЛЬЦАМИ АВТОРСКИХ ПРАВ И/ИЛИ ДРУГИМИ СТОРОНАМИ «КАК ОНА ЕСТЬ» БЕЗ КАКОГО-ЛИБО ВИДА ГАРАНТИЙ, ВЫРАЖЕННЫХ ЯВНО ИЛИ ПОДРАЗУМЕВАЕМЫХ, ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ИМИ, 
///ПОДРАЗУМЕВАЕМЫЕ ГАРАНТИИ КОММЕРЧЕСКОЙ ЦЕННОСТИ И ПРИГОДНОСТИ ДЛЯ КОНКРЕТНОЙ ЦЕЛИ. 
///НИ В КОЕМ СЛУЧАЕ НИ ОДИН ВЛАДЕЛЕЦ АВТОРСКИХ ПРАВ И НИ ОДНО ДРУГОЕ ЛИЦО, КОТОРОЕ МОЖЕТ ИЗМЕНЯТЬ И/ИЛИ ПОВТОРНО РАСПРОСТРАНЯТЬ ПРОГРАММУ, КАК БЫЛО СКАЗАНО ВЫШЕ, НЕ НЕСЁТ ОТВЕТСТВЕННОСТИ,
///ВКЛЮЧАЯ ЛЮБЫЕ ОБЩИЕ, СЛУЧАЙНЫЕ, СПЕЦИАЛЬНЫЕ ИЛИ ПОСЛЕДОВАВШИЕ УБЫТКИ, ВСЛЕДСТВИЕ ИСПОЛЬЗОВАНИЯ ИЛИ НЕВОЗМОЖНОСТИ ИСПОЛЬЗОВАНИЯ ПРОГРАММЫ 
///(ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ПОТЕРЕЙ ДАННЫХ, ИЛИ ДАННЫМИ, СТАВШИМИ НЕПРАВИЛЬНЫМИ, ИЛИ ПОТЕРЯМИ, ПРИНЕСЕННЫМИ ИЗ-ЗА ВАС ИЛИ ТРЕТЬИХ ЛИЦ, 
///ИЛИ ОТКАЗОМ ПРОГРАММЫ РАБОТАТЬ СОВМЕСТНО С ДРУГИМИ ПРОГРАММАМИ), ДАЖЕ ЕСЛИ ТАКОЙ ВЛАДЕЛЕЦ ИЛИ ДРУГОЕ ЛИЦО БЫЛИ ИЗВЕЩЕНЫ О ВОЗМОЖНОСТИ ТАКИХ УБЫТКОВ.
///
///Copyright (c) 2021, https://github.com/Larii75 All rights reserved.
///
///Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
///
///Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
///Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
///Neither the name of the <ORGANIZATION> nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
///THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
///THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER 
///OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
///PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
///LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
///EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#Если Сервер ИЛИ ВнешнееСоединение Тогда

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Бронирование") Тогда
		Бронирование = ДанныеЗаполнения.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Ответственный = ПараметрыСеанса.ТекущийПользователь;

КонецПроцедуры

////Внутри рыба(набросок) для отладки архитектуры движений. 
///нервным особам не смотреть -
///через точку и все такое...
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Для Каждого Движение Из Движения Цикл
		Движение.Записывать = Истина;
		Движение.Очистить();
		Движение.Записать();
		Движение.БлокироватьДляИзменения = Истина;
		Движение.Записывать = Истина;
	КонецЦикла;
	
	Для Каждого ТекСтрокаМестаРазмещения Из Бронирование.МестаРазмещения Цикл
		// регистр ОстаткиБронирования Сторно
		Движение1 = Движения.ОстаткиБронирования.Добавить();
		Движение1.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение1.Период = Бронирование.Начало;
		Движение1.МояОрганизация = Бронирование.МояОрганизация;
		Движение1.Событие = Бронирование.Событие;
		Движение1.Бронирующий = Бронирование.Бронирующий;
		Движение1.Бронирование = Бронирование;
		Движение1.СредствоРазмещения = Бронирование.СредствоРазмещения;
		Движение1.ЭтажСредстваРазмещения = Бронирование.ЭтажРазмещения;
		Движение1.КомнатаСредстваРазмещения = ТекСтрокаМестаРазмещения.КомнатаСредстваРазмещения;
		Движение1.МестоРазмещения = ТекСтрокаМестаРазмещения.МестоРазмещения;
		Движение1.Количество =-1;
		
		Движение1 = Движения.ОстаткиБронирования.Добавить();
		Движение1.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение1.Период = НачалоДня(ФункцииПримитивныеТипыСервер.ВернутьДатуСДобавитьКДате(Бронирование.Окончание, ,1));
		Движение1.МояОрганизация = Бронирование.МояОрганизация;
		Движение1.Событие = Бронирование.Событие;
		Движение1.Бронирующий = Бронирование.Бронирующий;
		Движение1.Бронирование = Бронирование;
		Движение1.СредствоРазмещения = Бронирование.СредствоРазмещения;
		Движение1.ЭтажСредстваРазмещения = Бронирование.ЭтажРазмещения;
		Движение1.КомнатаСредстваРазмещения = ТекСтрокаМестаРазмещения.КомнатаСредстваРазмещения;
		Движение1.МестоРазмещения = ТекСтрокаМестаРазмещения.МестоРазмещения;
		Движение1.Количество = -1;
		
		// регистр ОстаткиМестРазмещения Сторно
		Движение2 = Движения.ОстаткиМестРазмещения.Добавить();
		Движение2.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение2.Период = Бронирование.Начало;
		Движение2.СредствоРазмещения = Бронирование.СредствоРазмещения;
		Движение2.ЭтажСредстваРазмещения = Бронирование.ЭтажРазмещения;
		Движение2.КомнатаСредстваРазмещения = ТекСтрокаМестаРазмещения.КомнатаСредстваРазмещения;
		Движение2.МестоРазмещения = ТекСтрокаМестаРазмещения.МестоРазмещения;
		Движение2.Количество = -1;
		
		Движение2 = Движения.ОстаткиМестРазмещения.Добавить();
		Движение2.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение2.Период = Бронирование.Начало;
		Движение2.СредствоРазмещения = Бронирование.СредствоРазмещения;
		Движение2.ЭтажСредстваРазмещения = Бронирование.ЭтажРазмещения;
		Движение2.КомнатаСредстваРазмещения = ТекСтрокаМестаРазмещения.КомнатаСредстваРазмещения;
		Движение2.МестоРазмещения = ТекСтрокаМестаРазмещения.МестоРазмещения;
		Движение2.Бронирование = Бронирование;
		Движение2.Количество = -1;
		
		Движение2 = Движения.ОстаткиМестРазмещения.Добавить();
		Движение2.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение2.Период = НачалоДня(ФункцииПримитивныеТипыКлиентСервер.ВернутьДатуСДобавитьКДатеКС(Бронирование.Окончание, ,1));
		Движение2.СредствоРазмещения = Бронирование.СредствоРазмещения;
		Движение2.ЭтажСредстваРазмещения = Бронирование.ЭтажРазмещения;
		Движение2.КомнатаСредстваРазмещения = ТекСтрокаМестаРазмещения.КомнатаСредстваРазмещения;
		Движение2.МестоРазмещения = ТекСтрокаМестаРазмещения.МестоРазмещения;
		Движение2.Бронирование = Бронирование;
		Движение2.Количество = -1;
		
		Движение2 = Движения.ОстаткиМестРазмещения.Добавить();
		Движение2.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение2.Период = НачалоДня(ФункцииПримитивныеТипыКлиентСервер.ВернутьДатуСДобавитьКДатеКС(Бронирование.Окончание, ,1));
		Движение2.СредствоРазмещения = Бронирование.СредствоРазмещения;
		Движение2.ЭтажСредстваРазмещения = Бронирование.ЭтажРазмещения;
		Движение2.КомнатаСредстваРазмещения = ТекСтрокаМестаРазмещения.КомнатаСредстваРазмещения;
		Движение2.МестоРазмещения = ТекСтрокаМестаРазмещения.МестоРазмещения;
		Движение2.Количество = -1;
		
		// регистр ОборотыБронирования Сторно
		Для ДеньВЦикле = 1 По ТекСтрокаМестаРазмещения.Дней-1 Цикл
			Если ДеньВЦикле > 1 Тогда
				ДобавитьДень = ФункцииПримитивныеТипыКлиентСервер.ВернутьДатуСДобавитьКДатеКС(ДобавитьДень, "ДЕНЬ", 1);
			Иначе
				ДобавитьДень = Бронирование.Начало;
			КонецЕсли;
			Движение3 = Движения.ОборотыБронирования.Добавить();
			Движение3.Период = НачалоДня(ДобавитьДень);
			Движение3.МояОрганизация = Бронирование.МояОрганизация;
			Движение3.Событие = Бронирование.Событие;
			Движение3.Бронирующий = Бронирование.Бронирующий;
			Движение3.СредствоРазмещения = Бронирование.СредствоРазмещения;
			Движение3.ЭтажСредстваРазмещения = Бронирование.ЭтажРазмещения;
			Движение3.КомнатаСредстваРазмещения = ТекСтрокаМестаРазмещения.КомнатаСредстваРазмещения;
			Движение3.МестоРазмещения = ТекСтрокаМестаРазмещения.МестоРазмещения;
			Движение3.ВалютаУчета = Бронирование.ВалютаУчета;
			Движение3.ВалютаДокумента = Бронирование.ВалютаДокумента;
			Движение3.Количество = -1;
			Движение3.СуммаВВалютеДокумента = -(ТекСтрокаМестаРазмещения.ЦенаВВалютеДокумента - ТекСтрокаМестаРазмещения.СкидкаВВалютеДокумента);
			Если Бронирование.ВалютаДокумента = Бронирование.ВалютаУчета Тогда
				Движение3.СуммаВВалютеУчета = -(ТекСтрокаМестаРазмещения.ЦенаВВалютеУчета - ТекСтрокаМестаРазмещения.СкидкаВВалютеУчета);
			Иначе
				Отказ = Истина;
				ВызватьИсключение("Функция в разработке!")
			КонецЕсли;
		КонецЦикла;
	
		// регистр ОстаткиЗаселенияПоБронированиям Приход 
		Движение4 = Движения.ОстаткиЗаселенияПоБронированиям.ДобавитьПриход();
		Движение4.Бронирование = Бронирование;
		Движение4.Период = Бронирование.Начало;
		Движение4.СредствоРазмещения = Бронирование.СредствоРазмещения;
		Движение4.ЭтажСредстваРазмещения = Бронирование.ЭтажРазмещения;
		Движение4.КомнатаСредстваРазмещения = ТекСтрокаМестаРазмещения.КомнатаСредстваРазмещения;
		Движение4.МестоРазмещения = ТекСтрокаМестаРазмещения.МестоРазмещения;
		Движение4.Количество = -1;
		
		// регистр ОстаткиВзаиморасчетов Приход
		Движение5 = Движения.ОстаткиВзаиморасчетов.ДобавитьПриход();
		Движение5.Бронирование = Бронирование;
		Движение5.Период = Бронирование.Начало;
		Движение5.МояОрганизация = Бронирование.МояОрганизация;
		Движение5.Бронирующий = Бронирование.Бронирующий;
		Движение5.ВалютаУчета = Бронирование.ВалютаУчета;
		Движение5.СуммаВВалютеУчета = -ТекСтрокаМестаРазмещения.СуммаСоСкидкойВВалютеУчета;
		
	    // регистр ОборотыОтменыБронирования
		Движение6 = Движения.ОборотыОтменыБронирования.Добавить();
		Движение6.Период = Дата;
		Движение6.МояОрганизация = Бронирование.МояОрганизация;
		Движение6.Событие = Бронирование.Событие;
		Движение6.Бронирующий = Бронирование.Бронирующий;
		Движение6.Бронирование = Бронирование;
		Движение6.СредствоРазмещения = Бронирование.СредствоРазмещения;
		Движение6.ЭтажСредстваРазмещения = Бронирование.ЭтажРазмещения;
		Движение6.КомнатаСредстваРазмещения = ТекСтрокаМестаРазмещения.КомнатаСредстваРазмещения;
		Движение6.МестоРазмещения = ТекСтрокаМестаРазмещения.МестоРазмещения;
		Движение6.ВалютаУчета = Бронирование.ВалютаУчета;
		Движение6.ВалютаДокумента = Бронирование.ВалютаДокумента;
		Движение6.Количество = 1;
		Движение6.СуммаВВалютеДокумента = ТекСтрокаМестаРазмещения.СуммаСоСкидкойВВалютеДокумента;
		Если Бронирование.ВалютаДокумента = Бронирование.ВалютаУчета Тогда
			Движение6.СуммаВВалютеУчета = ТекСтрокаМестаРазмещения.СуммаСоСкидкойВВалютеУчета;
		Иначе
			Отказ = Истина;
			ВызватьИсключение("Функция в разработке!")
		КонецЕсли;
		
	КонецЦикла;
	
	// регистр ОборотыПредоставленныхСкидок
	Движение6 = Движения.ОборотыПредоставленныхСкидок.Добавить();
	Движение6.Период = Бронирование.Дата;
	Движение6.Бронирование = Бронирование;
	Движение6.Бронирующий = Бронирование.Бронирующий;
	Движение6.ВалютаУчета = Бронирование.ВалютаУчета;
	Движение6.СуммаСкидки = -Бронирование.МестаРазмещения.Итог("СкидкаВВалютеУчета");
	
	///Проверяем остатки
	Для Каждого Движение Из Движения Цикл
		Движение.Записать();
	КонецЦикла;
	КонтрольОстатковОтменаБронирование(Ссылка, Бронирование, Бронирование.Начало, Бронирование.Окончание, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура КонтрольОстатковОтменаБронирование(ОбъектСсылка, БронированиеСсылка, Начало, Окончание, ДополнительныеСвойстваДляПроведения, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОборотыОтменыБронированияОбороты.Бронирование) КАК Бронирование,
	               |	ОборотыОтменыБронированияОбороты.КоличествоОборот КАК КоличествоОборот
	               |ИЗ
	               |	РегистрНакопления.ОборотыОтменыБронирования.Обороты(, , Запись, Бронирование = &БронированиеСсылка) КАК ОборотыОтменыБронированияОбороты
	               |ГДЕ
	               |	НЕ ОборотыОтменыБронированияОбороты.Регистратор = &Ссылка
	               |	И ОборотыОтменыБронированияОбороты.Регистратор ССЫЛКА Документ.ОтменаБронирования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОстаткиЗаселенияПоБронированиямОстатки.КоличествоОстаток КАК КоличествоОстаток,
	               |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОстаткиЗаселенияПоБронированиямОстатки.Бронирование) КАК Бронирование,
	               |	ОстаткиЗаселенияПоБронированиямОстатки.СредствоРазмещения КАК СредствоРазмещения,
	               |	ОстаткиЗаселенияПоБронированиямОстатки.ЭтажСредстваРазмещения КАК ЭтажСредстваРазмещения,
	               |	ОстаткиЗаселенияПоБронированиямОстатки.КомнатаСредстваРазмещения КАК КомнатаСредстваРазмещения,
	               |	ПРЕДСТАВЛЕНИЕ(ОстаткиЗаселенияПоБронированиямОстатки.МестоРазмещения) КАК МестоРазмещения
	               |ИЗ
	               |	РегистрНакопления.ОстаткиЗаселенияПоБронированиям.Остатки(, Бронирование = &БронированиеСсылка) КАК ОстаткиЗаселенияПоБронированиямОстатки
	               |ГДЕ
	               |	ОстаткиЗаселенияПоБронированиямОстатки.КоличествоОстаток < 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОстаткиВзаиморасчетовОстатки.Бронирование) КАК Бронирование,
	               |	СУММА(ОстаткиВзаиморасчетовОстатки.СуммаВВалютеУчетаОстаток) КАК СуммаВВалютеУчетаОстаток
	               |ИЗ
	               |	РегистрНакопления.ОстаткиВзаиморасчетов.Остатки(, Бронирование = &БронированиеСсылка) КАК ОстаткиВзаиморасчетовОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОстаткиВзаиморасчетовОстатки.Бронирование)
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ОстаткиВзаиморасчетовОстатки.СуммаВВалютеУчетаОстаток) < 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОстаткиМестРазмещенияОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
	               |	ОстаткиМестРазмещенияОстаткиИОбороты.СредствоРазмещения КАК СредствоРазмещения,
	               |	ОстаткиМестРазмещенияОстаткиИОбороты.ЭтажСредстваРазмещения КАК ЭтажСредстваРазмещения,
	               |	ОстаткиМестРазмещенияОстаткиИОбороты.КомнатаСредстваРазмещения КАК КомнатаСредстваРазмещения,
	               |	ОстаткиМестРазмещенияОстаткиИОбороты.МестоРазмещения КАК МестоРазмещения,
	               |	ОстаткиМестРазмещенияОстаткиИОбороты.Бронирование КАК Бронирование,
	               |	ОстаткиМестРазмещенияОстаткиИОбороты.Период КАК Период
	               |ИЗ
	               |	РегистрНакопления.ОстаткиМестРазмещения.ОстаткиИОбороты(
	               |			&Начало,
	               |			&Окончание,
	               |			Регистратор,
	               |			ДвиженияИГраницыПериода,
	               |			(СредствоРазмещения, ЭтажСредстваРазмещения, КомнатаСредстваРазмещения, МестоРазмещения) В
	               |				(ВЫБРАТЬ
	               |					ТЧ.Ссылка.СредствоРазмещения,
	               |					ТЧ.Ссылка.ЭтажРазмещения,
	               |					ТЧ.КомнатаСредстваРазмещения,
	               |					ТЧ.МестоРазмещения
	               |				ИЗ
	               |					Документ.Бронирование.МестаРазмещения КАК ТЧ
	               |				ГДЕ
	               |					ТЧ.Ссылка = &БронированиеСсылка)) КАК ОстаткиМестРазмещенияОстаткиИОбороты
	               |ГДЕ
	               |	ОстаткиМестРазмещенияОстаткиИОбороты.КоличествоКонечныйОстаток < 0";
	   
	Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
	Запрос.УстановитьПараметр("БронированиеСсылка", БронированиеСсылка);
	Запрос.УстановитьПараметр("Начало", Начало);
	Запрос.УстановитьПараметр("Окончание", Окончание);
		
	Пакет = Запрос.ВыполнитьПакет();
	ВыборкаОтмены = Пакет[0].Выбрать();
	Если ВыборкаОтмены.Следующий() Тогда
		Отказ = Истина;
	   	Сообщить("По " + ВыборкаОтмены.Бронирование + " есть отмена!");
	КонецЕсли;
	
	ВыборкаОстаткиЗаселений = Пакет[1].Выбрать();
	Пока ВыборкаОстаткиЗаселений.Следующий() Цикл
		Отказ = Истина;
	   	Сообщить("В " + ВыборкаОстаткиЗаселений.Бронирование + " по месту размещения " + ВыборкаОстаткиЗаселений.МестоРазмещения + " отрицательный остаток по остаткам заселения!");
	КонецЦикла;
	
	ВыборкаОстаткиВзаиморасчетов = Пакет[2].Выбрать();
	Пока ВыборкаОстаткиВзаиморасчетов.Следующий() Цикл
		Отказ = Истина;
	   	Сообщить("В " + ВыборкаОстаткиВзаиморасчетов.Бронирование + " образуется переплата!");
	КонецЦикла;
	
	ВыборкаОстаткиМестРазмещения = Пакет[3].Выбрать();
	Пока ВыборкаОстаткиМестРазмещения.Следующий() Цикл
		Отказ = Истина;
	   	Сообщить("В " + ВыборкаОстаткиМестРазмещения.Бронирование + " по месту размещения " + ВыборкаОстаткиМестРазмещения.МестоРазмещения + "
		|на дату " + Формат(ВыборкаОстаткиМестРазмещения.Период, "ДФ=dd/MM/yy") + " отрицательный остаток по остаткам мест размещения!");
	КонецЦикла;
		
КонецПроцедуры

#Иначе

ВызватьИсключение("Недопустимый вызов объекта на клиенте!");

#КонецЕсли
