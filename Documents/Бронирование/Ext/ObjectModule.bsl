///Copyright (c) 2021, https://github.com/Larii75.
///
///Разрешается повторное распространение и использование как в виде исходного кода, так и в двоичной форме, с изменениями или без, при соблюдении следующих условий:
///
///При повторном распространении исходного кода должно оставаться указанное выше уведомление об авторском праве, этот список условий и последующий отказ от гарантий.
///При повторном распространении двоичного кода должна сохраняться указанная выше информация об авторском праве, этот список условий и последующий отказ от гарантий 
///в документации и/или в других материалах, поставляемых при распространении. 
///Ни название <Организации>, ни имена её сотрудников не могут быть использованы в качестве поддержки или продвижения продуктов, основанных на этом ПО без предварительного письменного разрешения.
///ЭТА ПРОГРАММА ПРЕДОСТАВЛЕНА ВЛАДЕЛЬЦАМИ АВТОРСКИХ ПРАВ И/ИЛИ ДРУГИМИ СТОРОНАМИ «КАК ОНА ЕСТЬ» БЕЗ КАКОГО-ЛИБО ВИДА ГАРАНТИЙ, ВЫРАЖЕННЫХ ЯВНО ИЛИ ПОДРАЗУМЕВАЕМЫХ, ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ИМИ, 
///ПОДРАЗУМЕВАЕМЫЕ ГАРАНТИИ КОММЕРЧЕСКОЙ ЦЕННОСТИ И ПРИГОДНОСТИ ДЛЯ КОНКРЕТНОЙ ЦЕЛИ. 
///НИ В КОЕМ СЛУЧАЕ НИ ОДИН ВЛАДЕЛЕЦ АВТОРСКИХ ПРАВ И НИ ОДНО ДРУГОЕ ЛИЦО, КОТОРОЕ МОЖЕТ ИЗМЕНЯТЬ И/ИЛИ ПОВТОРНО РАСПРОСТРАНЯТЬ ПРОГРАММУ, КАК БЫЛО СКАЗАНО ВЫШЕ, НЕ НЕСЁТ ОТВЕТСТВЕННОСТИ,
///ВКЛЮЧАЯ ЛЮБЫЕ ОБЩИЕ, СЛУЧАЙНЫЕ, СПЕЦИАЛЬНЫЕ ИЛИ ПОСЛЕДОВАВШИЕ УБЫТКИ, ВСЛЕДСТВИЕ ИСПОЛЬЗОВАНИЯ ИЛИ НЕВОЗМОЖНОСТИ ИСПОЛЬЗОВАНИЯ ПРОГРАММЫ 
///(ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ПОТЕРЕЙ ДАННЫХ, ИЛИ ДАННЫМИ, СТАВШИМИ НЕПРАВИЛЬНЫМИ, ИЛИ ПОТЕРЯМИ, ПРИНЕСЕННЫМИ ИЗ-ЗА ВАС ИЛИ ТРЕТЬИХ ЛИЦ, 
///ИЛИ ОТКАЗОМ ПРОГРАММЫ РАБОТАТЬ СОВМЕСТНО С ДРУГИМИ ПРОГРАММАМИ), ДАЖЕ ЕСЛИ ТАКОЙ ВЛАДЕЛЕЦ ИЛИ ДРУГОЕ ЛИЦО БЫЛИ ИЗВЕЩЕНЫ О ВОЗМОЖНОСТИ ТАКИХ УБЫТКОВ.
///
///Copyright (c) 2021, https://github.com/Larii75 All rights reserved.
///
///Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
///
///Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
///Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
///Neither the name of the <ORGANIZATION> nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
///THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
///THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER 
///OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
///PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
///LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
///EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#Если Сервер ИЛИ ВнешнееСоединение Тогда
	
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Для Каждого Движение Из Движения Цикл
		Движение.Записывать = Истина;
		Движение.Очистить();
		Движение.Записать();
		Движение.БлокироватьДляИзменения = Истина;
		Движение.Записывать = Истина;
	КонецЦикла;

	///Дописать ОборотыПредоставленныхСкидок
	
	Для Каждого ТекСтрокаМестаРазмещения Из МестаРазмещения Цикл
		// регистр ОстаткиБронирования
		Движение1 = Движения.ОстаткиБронирования.Добавить();
		Движение1.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение1.Период = Начало;
		Движение1.МояОрганизация = МояОрганизация;
		Движение1.Событие = Событие;
		Движение1.Бронирующий = Бронирующий;
		Движение1.Бронирование = Ссылка;
		Движение1.СредствоРазмещения = СредствоРазмещения;
		Движение1.ЭтажСредстваРазмещения = ЭтажРазмещения;
		Движение1.КомнатаСредстваРазмещения = ТекСтрокаМестаРазмещения.КомнатаСредстваРазмещения;
		Движение1.МестоРазмещения = ТекСтрокаМестаРазмещения.МестоРазмещения;
		Движение1.Количество = 1;
		
		Движение1 = Движения.ОстаткиБронирования.Добавить();
		Движение1.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение1.Период = НачалоДня(ФункцииПримитивныеТипыСервер.ВернутьДатуСДобавитьКДате(Окончание, ,1));
		Движение1.МояОрганизация = МояОрганизация;
		Движение1.Событие = Событие;
		Движение1.Бронирующий = Бронирующий;
		Движение1.Бронирование = Ссылка;
		Движение1.СредствоРазмещения = СредствоРазмещения;
		Движение1.ЭтажСредстваРазмещения = ЭтажРазмещения;
		Движение1.КомнатаСредстваРазмещения = ТекСтрокаМестаРазмещения.КомнатаСредстваРазмещения;
		Движение1.МестоРазмещения = ТекСтрокаМестаРазмещения.МестоРазмещения;
		Движение1.Количество = 1;
		
		// регистр ОстаткиМестРазмещения
		Движение2 = Движения.ОстаткиМестРазмещения.Добавить();
		Движение2.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение2.Период = Начало;
		Движение2.СредствоРазмещения = СредствоРазмещения;
		Движение2.ЭтажСредстваРазмещения = ЭтажРазмещения;
		Движение2.КомнатаСредстваРазмещения = ТекСтрокаМестаРазмещения.КомнатаСредстваРазмещения;
		Движение2.МестоРазмещения = ТекСтрокаМестаРазмещения.МестоРазмещения;
		Движение2.Количество = 1;
		
		Движение2 = Движения.ОстаткиМестРазмещения.Добавить();
		Движение2.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение2.Период = Начало;
		Движение2.СредствоРазмещения = СредствоРазмещения;
		Движение2.ЭтажСредстваРазмещения = ЭтажРазмещения;
		Движение2.КомнатаСредстваРазмещения = ТекСтрокаМестаРазмещения.КомнатаСредстваРазмещения;
		Движение2.МестоРазмещения = ТекСтрокаМестаРазмещения.МестоРазмещения;
		Движение2.Бронирование = Ссылка;
		Движение2.Количество = 1;
		
		Движение2 = Движения.ОстаткиМестРазмещения.Добавить();
		Движение2.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение2.Период = НачалоДня(ФункцииПримитивныеТипыСервер.ВернутьДатуСДобавитьКДате(Окончание, ,1));
		Движение2.СредствоРазмещения = СредствоРазмещения;
		Движение2.ЭтажСредстваРазмещения = ЭтажРазмещения;
		Движение2.КомнатаСредстваРазмещения = ТекСтрокаМестаРазмещения.КомнатаСредстваРазмещения;
		Движение2.МестоРазмещения = ТекСтрокаМестаРазмещения.МестоРазмещения;
		Движение2.Бронирование = Ссылка;
		Движение2.Количество = 1;
		
		Движение2 = Движения.ОстаткиМестРазмещения.Добавить();
		Движение2.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение2.Период = НачалоДня(ФункцииПримитивныеТипыСервер.ВернутьДатуСДобавитьКДате(Окончание, ,1));
		Движение2.СредствоРазмещения = СредствоРазмещения;
		Движение2.ЭтажСредстваРазмещения = ЭтажРазмещения;
		Движение2.КомнатаСредстваРазмещения = ТекСтрокаМестаРазмещения.КомнатаСредстваРазмещения;
		Движение2.МестоРазмещения = ТекСтрокаМестаРазмещения.МестоРазмещения;
		Движение2.Количество = 1;
		
		// регистр ОборотыБронирования
		Для ДеньВЦикле = 1 По ТекСтрокаМестаРазмещения.Дней Цикл
			Если ДеньВЦикле > 1 Тогда
				ДобавитьДень = ДобавитьДень + 86400;
			Иначе
				ДобавитьДень = Начало;
			КонецЕсли;
			Движение3 = Движения.ОборотыБронирования.Добавить();
			Движение3.Период = НачалоДня(ДобавитьДень);
			Движение3.МояОрганизация = МояОрганизация;
			Движение3.Событие = Событие;
			Движение3.Бронирующий = Бронирующий;
			Движение3.СредствоРазмещения = СредствоРазмещения;
			Движение3.ЭтажСредстваРазмещения = ЭтажРазмещения;
			Движение3.КомнатаСредстваРазмещения = ТекСтрокаМестаРазмещения.КомнатаСредстваРазмещения;
			Движение3.МестоРазмещения = ТекСтрокаМестаРазмещения.МестоРазмещения;
			Движение3.ВалютаУчета = ВалютаУчета;
			Движение3.ВалютаДокумента = ВалютаДокумента;
			Движение3.Количество = 1;
			Движение3.СуммаВВалютеДокумента = ТекСтрокаМестаРазмещения.ЦенаВВалютеДокумента - ТекСтрокаМестаРазмещения.СкидкаВВалютеДокумента;
			Если ВалютаДокумента = ВалютаУчета Тогда
				Движение3.СуммаВВалютеУчета = ТекСтрокаМестаРазмещения.ЦенаВВалютеУчета - ТекСтрокаМестаРазмещения.СкидкаВВалютеУчета;
			Иначе
				Отказ = Истина;
				ВызватьИсключение("Функция в разработке!")
			КонецЕсли;
		КонецЦикла;
		
		// регистр ОстаткиЗаселенияПоБронированиям Приход 
		Движение4 = Движения.ОстаткиЗаселенияПоБронированиям.ДобавитьПриход();
		Движение4.Бронирование = Ссылка;
		Движение4.Период = Начало;
		Движение4.СредствоРазмещения = СредствоРазмещения;
		Движение4.ЭтажСредстваРазмещения = ЭтажРазмещения;
		Движение4.КомнатаСредстваРазмещения = ТекСтрокаМестаРазмещения.КомнатаСредстваРазмещения;
		Движение4.МестоРазмещения = ТекСтрокаМестаРазмещения.МестоРазмещения;
		Движение4.Количество = 1;
		
		// регистр ОстаткиВзаиморасчетов Приход
		Движение5 = Движения.ОстаткиВзаиморасчетов.ДобавитьПриход();
		Движение5.Бронирование = Ссылка;
		Движение5.Период = Начало;
		Движение5.МояОрганизация = МояОрганизация;
		Движение5.Бронирующий = Бронирующий;
		Движение5.ВалютаУчета = ВалютаУчета;
		Движение5.СуммаВВалютеУчета = ТекСтрокаМестаРазмещения.СуммаСоСкидкойВВалютеУчета;
		
	КонецЦикла;

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СуммаВВалютеДокумента = МестаРазмещения.Итог("СуммаСоСкидкойВВалютеДокумента");
	Если ВалютаДокумента = ВалютаУчета Тогда
		СуммаВВалютеУчета = МестаРазмещения.Итог("СуммаСоСкидкойВВалютеДокумента");
	Иначе
		Отказ = Истина;
		ВызватьИсключение("Функция в разработке!")
	КонецЕсли;
	
	Если НЕ ПараметрыСеанса.ТекущийПользователь = Неопределено Тогда
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтоНовый() Тогда
		СуммаВВалютеДокумента = МестаРазмещения.Итог("СуммаСоСкидкойВВалютеДокумента");
		Если ВалютаДокумента = ВалютаУчета Тогда
			СуммаВВалютеУчета = МестаРазмещения.Итог("СуммаСоСкидкойВВалютеДокумента");
		Иначе
			Отказ = Истина;
			ВызватьИсключение("Функция в разработке!")
		КонецЕсли;
		СлужебнаяСсылка = Документы.Бронирование.ПолучитьСсылку(Новый УникальныйИдентификатор());
		УстановитьСсылкуНового(СлужебнаяСсылка);
	КонецЕсли;
	ЗаполнитьСуммыДокумента(Отказ);
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ЗаполнитьСуммыДокумента(Отказ)
	
	Если НЕ ЗначениеЗаполнено(СуммаВВалютеДокумента) ИЛИ НЕ ЗначениеЗаполнено(СуммаВВалютеУчета) Тогда
		СуммаВВалютеДокумента = МестаРазмещения.Итог("СуммаСоСкидкойВВалютеДокумента");
		Если ВалютаДокумента = ВалютаУчета Тогда
			СуммаВВалютеУчета = МестаРазмещения.Итог("СуммаСоСкидкойВВалютеДокумента");
		Иначе
			Отказ = Истина;
			ВызватьИсключение("Функция в разработке!")
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСуммыДокумента()

#Иначе

ВызватьИсключение("Недопустимый вызов объекта на клиенте!");

#КонецЕсли
