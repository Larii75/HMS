///Copyright (c) 2021, https://github.com/Larii75.
///
///Разрешается повторное распространение и использование как в виде исходного кода, так и в двоичной форме, с изменениями или без, при соблюдении следующих условий:
///
///При повторном распространении исходного кода должно оставаться указанное выше уведомление об авторском праве, этот список условий и последующий отказ от гарантий.
///При повторном распространении двоичного кода должна сохраняться указанная выше информация об авторском праве, этот список условий и последующий отказ от гарантий 
///в документации и/или в других материалах, поставляемых при распространении. 
///Ни название <Организации>, ни имена её сотрудников не могут быть использованы в качестве поддержки или продвижения продуктов, основанных на этом ПО без предварительного письменного разрешения.
///ЭТА ПРОГРАММА ПРЕДОСТАВЛЕНА ВЛАДЕЛЬЦАМИ АВТОРСКИХ ПРАВ И/ИЛИ ДРУГИМИ СТОРОНАМИ «КАК ОНА ЕСТЬ» БЕЗ КАКОГО-ЛИБО ВИДА ГАРАНТИЙ, ВЫРАЖЕННЫХ ЯВНО ИЛИ ПОДРАЗУМЕВАЕМЫХ, ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ИМИ, 
///ПОДРАЗУМЕВАЕМЫЕ ГАРАНТИИ КОММЕРЧЕСКОЙ ЦЕННОСТИ И ПРИГОДНОСТИ ДЛЯ КОНКРЕТНОЙ ЦЕЛИ. 
///НИ В КОЕМ СЛУЧАЕ НИ ОДИН ВЛАДЕЛЕЦ АВТОРСКИХ ПРАВ И НИ ОДНО ДРУГОЕ ЛИЦО, КОТОРОЕ МОЖЕТ ИЗМЕНЯТЬ И/ИЛИ ПОВТОРНО РАСПРОСТРАНЯТЬ ПРОГРАММУ, КАК БЫЛО СКАЗАНО ВЫШЕ, НЕ НЕСЁТ ОТВЕТСТВЕННОСТИ,
///ВКЛЮЧАЯ ЛЮБЫЕ ОБЩИЕ, СЛУЧАЙНЫЕ, СПЕЦИАЛЬНЫЕ ИЛИ ПОСЛЕДОВАВШИЕ УБЫТКИ, ВСЛЕДСТВИЕ ИСПОЛЬЗОВАНИЯ ИЛИ НЕВОЗМОЖНОСТИ ИСПОЛЬЗОВАНИЯ ПРОГРАММЫ 
///(ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ПОТЕРЕЙ ДАННЫХ, ИЛИ ДАННЫМИ, СТАВШИМИ НЕПРАВИЛЬНЫМИ, ИЛИ ПОТЕРЯМИ, ПРИНЕСЕННЫМИ ИЗ-ЗА ВАС ИЛИ ТРЕТЬИХ ЛИЦ, 
///ИЛИ ОТКАЗОМ ПРОГРАММЫ РАБОТАТЬ СОВМЕСТНО С ДРУГИМИ ПРОГРАММАМИ), ДАЖЕ ЕСЛИ ТАКОЙ ВЛАДЕЛЕЦ ИЛИ ДРУГОЕ ЛИЦО БЫЛИ ИЗВЕЩЕНЫ О ВОЗМОЖНОСТИ ТАКИХ УБЫТКОВ.
///
///Copyright (c) 2021, https://github.com/Larii75 All rights reserved.
///
///Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
///
///Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
///Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
///Neither the name of the <ORGANIZATION> nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
///THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
///THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER 
///OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
///PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
///LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
///EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.СуммаВВалютеДокумента = Объект.МестаРазмещения.Итог("СуммаСоСкидкойВВалютеДокумента");
	Если Объект.ВалютаДокумента = Объект.ВалютаУчета Тогда
		Объект.СуммаВВалютеУчета = Объект.МестаРазмещения.Итог("СуммаСоСкидкойВВалютеДокумента");
	Иначе
		Отказ = Истина;
		ПоказатьПредупреждение(,"Функция в разработке!", , "Ошибка!");
	КонецЕсли;
		
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура МестаРазмещенияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока Тогда
		ВычислитьДней("МестаРазмещения", Объект.Начало, Объект.Окончание);
	КонецЕсли;
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура НачалоПриИзменении(Элемент)
	
	ВычислитьДней("МестаРазмещения", Объект.Начало, Объект.Окончание);
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ОкончаниеПриИзменении(Элемент)
	
	ВычислитьДней("МестаРазмещения", Объект.Начало, Объект.Окончание);
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ВычислитьДней(ИмяТабличнойЧасти, ЗНАЧ Начало, ЗНАЧ Окончание)

	Начало = ФункцииПримитивныеТипыКлиентСервер.ДобавитьКДатеКС(Начало, , -1);
	Окончание = ФункцииПримитивныеТипыКлиентСервер.ДобавитьКДатеКС(Окончание, , 1);
	Для Каждого СтрокаТЧ Из Объект[ИмяТабличнойЧасти] Цикл
		СтрокаТЧ.Дней = ФункцииПримитивныеТипыКлиентСервер.РазностьДатКС(Начало, Окончание, "ДЕНЬ");
		ПересчитатьСуммыВСтрокеТЧ(СтрокаТЧ);
    КонецЦикла;
		
КонецПроцедуры // ВычислитьДней()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервереБезКонтекста
Функция ПолучитьЦенуНаСервере(СтруктураДанных, Дата)
	
	Возврат РегистрыСведений.Цены.ПолучитьЦену(СтруктураДанных, Дата);
	
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервереБезКонтекста
Функция ПолучитьСкидкуНаСервере(СтруктураДанных, Дата)
	
	Возврат РегистрыСведений.ИндивидуальныеСкидкиНаценки.ПолучитьСкидку(СтруктураДанных, Дата);
	
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура МестаРазмещенияКомнатаСредстваРазмещенияПриИзменении(Элемент)
	
	СтруктураДанных = Новый Структура;
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТипЗнч(ТекущиеДанные) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		СтруктураДанных.Вставить("СредствоРазмещения", Объект.СредствоРазмещения);
		СтруктураДанных.Вставить("ЭтажСредстваРазмещения", Объект.ЭтажСредстваРазмещения); 
		СтруктураДанных.Вставить("КомнатаСредстваРазмещения", ТекущиеДанные.КомнатаСредстваРазмещения); 
		СтруктураДанных.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанных.Вставить("ВалютаУчета", Объект.ВалютаУчета);
		РезультатФункцииЦена = ПолучитьЦенуНаСервере(СтруктураДанных, Объект.Начало);
		Если ТипЗнч(РезультатФункцииЦена) = Тип("Структура") Тогда
			ТекущиеДанные.ЦенаВВалютеДокумента = РезультатФункцииЦена.Цена;
			ТекущиеДанные.ЦенаВВалютеУчета = РезультатФункцииЦена.Цена; ///TODO
			СтруктураДанныхСкидка = Новый Структура("ВладелецСкидки, Цена", Объект.Бронирующий, РезультатФункцииЦена.Цена);
			РезультатФункцииСкидка = ПолучитьСкидкуНаСервере(СтруктураДанныхСкидка, Объект.Начало);
			Если ТипЗнч(РезультатФункцииСкидка) = Тип("Структура") Тогда
				ТекущиеДанные.СкидкаВВалютеДокумента = РезультатФункцииСкидка.Скидка;
				ТекущиеДанные.СкидкаВВалютеУчета = РезультатФункцииСкидка.Скидка; ///TODO	
			КонецЕсли;
			ПересчитатьСуммыВСтрокеТЧ(ТекущиеДанные);
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ПересчитатьСуммыВСтрокеТЧ(ДанныеФормыЭлементКоллекции, БазаРасчета="Цена")

	СтрокаТЧ = ДанныеФормыЭлементКоллекции;
	БазаРасчета = ВРЕГ(БазаРасчета);
	Если БазаРасчета = "ЦЕНА" ИЛИ БазаРасчета = "СКИДКА" Тогда
		СтрокаТЧ.СуммаСоСкидкойВВалютеДокумента = СтрокаТЧ.Дней * (СтрокаТЧ.ЦенаВВалютеДокумента-СтрокаТЧ.СкидкаВВалютеДокумента);
		СтрокаТЧ.СуммаСоСкидкойВВалютеУчета = СтрокаТЧ.Дней * (СтрокаТЧ.ЦенаВВалютеУчета-СтрокаТЧ.СкидкаВВалютеУчета);
	ИначеЕсли БазаРасчета = "СУММА" Тогда
		СтрокаТЧ.СкидкаВВалютеДокумента = ((СтрокаТЧ.ЦенаВВалютеДокумента * СтрокаТЧ.Дней) - СтрокаТЧ.СуммаСоСкидкойВВалютеДокумента) / СтрокаТЧ.Дней;
		СтрокаТЧ.СкидкаВВалютеУчета = ((СтрокаТЧ.ЦенаВВалютеУчета * СтрокаТЧ.Дней) - СтрокаТЧ.СуммаСоСкидкойВВалютеУчета) / СтрокаТЧ.Дней;
		ПересчитатьСуммыВСтрокеТЧ(СтрокаТЧ, "Скидка");
	Иначе
		ВызватьИсключение("Неожиданная база расчета!");
	КонецЕсли;
	
	МестаРазмещенияПриИзменении(Элементы.МестаРазмещения);

КонецПроцедуры // ПересчитатьСуммыВСтрокеТЧ()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура МестаРазмещенияЦенаПриИзменении(Элемент)
	
	ПересчитатьСуммыВСтрокеТЧ(Элемент.Родитель.ТекущиеДанные);
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура МестаРазмещенияЦенаВВалютеУчетаПриИзменении(Элемент)
	
	ПересчитатьСуммыВСтрокеТЧ(Элемент.Родитель.ТекущиеДанные);
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура МестаРазмещенияСкидкаПриИзменении(Элемент)
	
	ПересчитатьСуммыВСтрокеТЧ(Элемент.Родитель.ТекущиеДанные, "Скидка");
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура МестаРазмещенияСкидкаВВалютеУчетаПриИзменении(Элемент)
	
	ПересчитатьСуммыВСтрокеТЧ(Элемент.Родитель.ТекущиеДанные, "Скидка");
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура МестаРазмещенияСуммаСоСкидкойПриИзменении(Элемент)
	
	ПересчитатьСуммыВСтрокеТЧ(Элемент.Родитель.ТекущиеДанные, "Сумма");
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура МестаРазмещенияСуммаСоСкидкойВВалютеУчетаПриИзменении(Элемент)
	
	ПересчитатьСуммыВСтрокеТЧ(Элемент.Родитель.ТекущиеДанные, "Сумма");
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура СредствоРазмещенияПриИзменении(Элемент)
	
	Объект.МестаРазмещения.Очистить();
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ЭтажРазмещенияПриИзменении(Элемент)
	
	Объект.МестаРазмещения.Очистить();
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура БронирующийПриИзменении(Элемент)
	
	Для Каждого СтрокаТЧ Из Объект.МестаРазмещения Цикл
		СтрокаТЧ.СкидкаВВалютеДокумента = 0;
		СтрокаТЧ.СкидкаВВалютеУчета = 0;
		ПересчитатьСуммыВСтрокеТЧ(СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура МестаРазмещенияПриИзменении(Элемент)
	
	Объект.СуммаВВалютеДокумента = Объект.МестаРазмещения.Итог("СуммаСоСкидкойВВалютеДокумента");
	Объект.СуммаВВалютеУчета = Объект.МестаРазмещения.Итог("СуммаСоСкидкойВВалютеУчета");
	
КонецПроцедуры


