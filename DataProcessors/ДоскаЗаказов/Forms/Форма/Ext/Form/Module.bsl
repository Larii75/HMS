///Copyright (c) 2021, https://github.com/Larii75.
///
///Разрешается повторное распространение и использование как в виде исходного кода, так и в двоичной форме, с изменениями или без, при соблюдении следующих условий:
///
///При повторном распространении исходного кода должно оставаться указанное выше уведомление об авторском праве, этот список условий и последующий отказ от гарантий.
///При повторном распространении двоичного кода должна сохраняться указанная выше информация об авторском праве, этот список условий и последующий отказ от гарантий 
///в документации и/или в других материалах, поставляемых при распространении. 
///Ни название <Организации>, ни имена её сотрудников не могут быть использованы в качестве поддержки или продвижения продуктов, основанных на этом ПО без предварительного письменного разрешения.
///ЭТА ПРОГРАММА ПРЕДОСТАВЛЕНА ВЛАДЕЛЬЦАМИ АВТОРСКИХ ПРАВ И/ИЛИ ДРУГИМИ СТОРОНАМИ «КАК ОНА ЕСТЬ» БЕЗ КАКОГО-ЛИБО ВИДА ГАРАНТИЙ, ВЫРАЖЕННЫХ ЯВНО ИЛИ ПОДРАЗУМЕВАЕМЫХ, ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ИМИ, 
///ПОДРАЗУМЕВАЕМЫЕ ГАРАНТИИ КОММЕРЧЕСКОЙ ЦЕННОСТИ И ПРИГОДНОСТИ ДЛЯ КОНКРЕТНОЙ ЦЕЛИ. 
///НИ В КОЕМ СЛУЧАЕ НИ ОДИН ВЛАДЕЛЕЦ АВТОРСКИХ ПРАВ И НИ ОДНО ДРУГОЕ ЛИЦО, КОТОРОЕ МОЖЕТ ИЗМЕНЯТЬ И/ИЛИ ПОВТОРНО РАСПРОСТРАНЯТЬ ПРОГРАММУ, КАК БЫЛО СКАЗАНО ВЫШЕ, НЕ НЕСЁТ ОТВЕТСТВЕННОСТИ,
///ВКЛЮЧАЯ ЛЮБЫЕ ОБЩИЕ, СЛУЧАЙНЫЕ, СПЕЦИАЛЬНЫЕ ИЛИ ПОСЛЕДОВАВШИЕ УБЫТКИ, ВСЛЕДСТВИЕ ИСПОЛЬЗОВАНИЯ ИЛИ НЕВОЗМОЖНОСТИ ИСПОЛЬЗОВАНИЯ ПРОГРАММЫ 
///(ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ПОТЕРЕЙ ДАННЫХ, ИЛИ ДАННЫМИ, СТАВШИМИ НЕПРАВИЛЬНЫМИ, ИЛИ ПОТЕРЯМИ, ПРИНЕСЕННЫМИ ИЗ-ЗА ВАС ИЛИ ТРЕТЬИХ ЛИЦ, 
///ИЛИ ОТКАЗОМ ПРОГРАММЫ РАБОТАТЬ СОВМЕСТНО С ДРУГИМИ ПРОГРАММАМИ), ДАЖЕ ЕСЛИ ТАКОЙ ВЛАДЕЛЕЦ ИЛИ ДРУГОЕ ЛИЦО БЫЛИ ИЗВЕЩЕНЫ О ВОЗМОЖНОСТИ ТАКИХ УБЫТКОВ.
///
///Copyright (c) 2021, https://github.com/Larii75 All rights reserved.
///
///Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
///
///Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
///Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
///Neither the name of the <ORGANIZATION> nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
///THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
///THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER 
///OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
///PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
///LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
///EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Дата = ТекущаяДата();
	Элементы.Декорация1.Заголовок = "Сегодня: " + Формат(ТекущаяДата(), "ДФ=dd/MM/yyyy");
	ОбновитьНаСервере();
	
КонецПроцедуры //ПриСозданииНаСервере()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьКолонкиДереваДни(Элементы, Знач Дата, ТекущийМесяц, ГраницаТекущегоМесяца, СписокПутей=Неопределено)

	ГраницаТекущегоМесяца = День(КонецМесяца(Дата));
	СоответствиеДнейНедели = Новый Соответствие;
	СоответствиеДнейНедели.Вставить(1, "Пн");
	СоответствиеДнейНедели.Вставить(2, "Вт");
	СоответствиеДнейНедели.Вставить(3, "Ср");
	СоответствиеДнейНедели.Вставить(4, "Чт");
	СоответствиеДнейНедели.Вставить(5, "Пт");
	СоответствиеДнейНедели.Вставить(6, "Сб");
	СоответствиеДнейНедели.Вставить(7, "Вс");
	ИнициализацияСпискаПутей = ТипЗнч(СписокПутей)=Тип("СписокЗначений");
	Если ИнициализацияСпискаПутей Тогда
		СписокПутей.Очистить();
	КонецЕсли;	
	
	Для ИмяКолонкиДня = 1 По 31 Цикл
		#Если Сервер ИЛИ ВнешнееСоединение Тогда
			Если ИнициализацияСпискаПутей Тогда	
				СписокПутей.Добавить(Элементы["ДеревоДень"+Строка(ИмяКолонкиДня)].Имя, Элементы["ДеревоДень"+Строка(ИмяКолонкиДня)].ПутьКДанным);
			КонецЕсли;
		#КонецЕсли
		Если НЕ ТекущийМесяц = Месяц(Дата) Тогда
			Если ИмяКолонкиДня > 28 И ИмяКолонкиДня < 32 Тогда
				Если ГраницаТекущегоМесяца >= ИмяКолонкиДня Тогда
					Элементы["ДеревоДень"+Строка(ИмяКолонкиДня)].Видимость = Истина;
					Элементы["ДеревоДень"+Строка(ИмяКолонкиДня)].Заголовок = Формат(ИмяКолонкиДня, "ЧЦ=2; ЧВН=;") + " " + СоответствиеДнейНедели[ДеньНедели(Дата(Год(Дата), Месяц(Дата), ИмяКолонкиДня))];
				Иначе
					Элементы["ДеревоДень"+Строка(ИмяКолонкиДня)].Видимость = Ложь;
					Элементы["ДеревоДень"+Строка(ИмяКолонкиДня)].Заголовок = "";
				КонецЕсли;
			Иначе
				Элементы["ДеревоДень"+Строка(ИмяКолонкиДня)].Заголовок = Формат(ИмяКолонкиДня, "ЧЦ=2; ЧВН=;") + " " + СоответствиеДнейНедели[ДеньНедели(Дата(Год(Дата), Месяц(Дата), ИмяКолонкиДня))];
			КонецЕсли;
		КонецЕсли;
		Элементы["ДеревоДень"+Строка(ИмяКолонкиДня)].ЦветТекстаЗаголовка = Новый Цвет;
	КонецЦикла;
    ТекущийМесяц = Месяц(Дата);
	Элементы["ДеревоДень"+Строка(День(Дата))].ЦветТекстаЗаголовка = Новый Цвет(255, 0, 0);

КонецПроцедуры // ИзменитьВидимостьКолонокДерева()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ИзменитьКолонкиДереваДни(Элементы.Дерево.ПодчиненныеЭлементы, Дата, ТекущийМесяц, ГраницаТекущегоМесяца);
	Объект.Начало = Дата;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.Дерево;
	Элементы.Дерево.ТекущийЭлемент = Элементы["ДеревоДень"+Строка(День(Дата))];
	Элементы.Дерево.ТекущаяСтрока = 0;
	
КонецПроцедуры //ДатаПриИзменении()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ДобавитьМесяцКДате(Команда)
	
	Дата = ДобавитьМесяц(Дата, 1);
	ОбновитьНаСервере();
	РазвернутьСвернутьСтрокиДерева();
	
КонецПроцедуры //ДобавитьМесяцКДате()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура УбавитьМесяцОтДаты(Команда)
	
	Дата = ДобавитьМесяц(Дата, -1);
	ОбновитьНаСервере();
	РазвернутьСвернутьСтрокиДерева();
	
КонецПроцедуры //УбавитьМесяцОтДаты()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ЗаполнитьДеревоНаСервере()
	
	МассивИдентификаторов = Новый Массив;
	
	ДеревоКорень = Дерево.ПолучитьЭлементы();
	ДеревоКорень.Очистить();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
    Таблица = ОбработкаОбъект.РезультатКомпоновки(НачалоМесяца(Дата), КонецМесяца(Дата));
    ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	///TODO Нужна проверка состава колонок таблицы.
	
	ТаблицаСредство = Неопределено;
	ТаблицаЭтаж = Неопределено;
	ТаблицаКомната = Неопределено;
	ТаблицаМесто = Неопределено;
	
	Для Каждого Строка Из Таблица Цикл
		Если Строка.КоличествоКонечныйОстаток = Неопределено Тогда
			Продолжить;
		Иначе
			///Построение иерархии
			ДеньМесяца = День(Строка.ПериодДень);		
			Если НЕ ТаблицаСредство = Строка.СредствоРазмещения Тогда
				ТаблицаСредство = Строка.СредствоРазмещения;
				НоваяСтрокаСредство = ДеревоКорень.Добавить();
				НоваяСтрокаСредство.Размещение = ТаблицаСредство;
				ИдентификаторСредство = НоваяСтрокаСредство.ПолучитьИдентификатор();
				МассивИдентификаторов.Добавить(ИдентификаторСредство);
			КонецЕсли;
			Если НЕ ТаблицаЭтаж = Строка.ЭтажСредстваРазмещения Тогда
				ТаблицаЭтаж = Строка.ЭтажСредстваРазмещения;
				ДеревоЭтаж = НоваяСтрокаСредство.ПолучитьЭлементы();
				НоваяСтрокаЭтаж = ДеревоЭтаж.Добавить();
				НоваяСтрокаЭтаж.Размещение = ТаблицаЭтаж;
				ИдентификаторЭтаж = НоваяСтрокаЭтаж.ПолучитьИдентификатор();
				МассивИдентификаторов.Добавить(ИдентификаторЭтаж);	
			КонецЕсли;
			Если НЕ ТаблицаКомната = Строка.КомнатаСредстваРазмещения Тогда
				ТаблицаКомната = Строка.КомнатаСредстваРазмещения;
				ДеревоКомната = НоваяСтрокаЭтаж.ПолучитьЭлементы();
				НоваяСтрокаКомната = ДеревоКомната.Добавить();
				НоваяСтрокаКомната.Размещение = ТаблицаКомната;
				Если РазворачиватьДоКомнат Тогда
					ИдентификаторКомната = НоваяСтрокаКомната.ПолучитьИдентификатор();
					МассивИдентификаторов.Добавить(ИдентификаторКомната);
				КонецЕсли;
			КонецЕсли;
			Если НЕ ТаблицаМесто = Строка.МестоРазмещения Тогда
				ТаблицаМесто = Строка.МестоРазмещения;
				ДеревоМесто = НоваяСтрокаКомната.ПолучитьЭлементы();
				НоваяСтрокаМесто = ДеревоМесто.Добавить();
				НоваяСтрокаМесто.Размещение = ТаблицаМесто;	
			КонецЕсли;
			///Итоги группировок
			НоваяСтрокаСредство["День"+Строка(ДеньМесяца)] = НоваяСтрокаСредство["День"+Строка(ДеньМесяца)] + Строка.КоличествоКонечныйОстаток;
			НоваяСтрокаЭтаж["День"+Строка(ДеньМесяца)] = НоваяСтрокаЭтаж["День"+Строка(ДеньМесяца)] + Строка.КоличествоКонечныйОстаток;
			НоваяСтрокаКомната["День"+Строка(ДеньМесяца)] = НоваяСтрокаКомната["День"+Строка(ДеньМесяца)] + Строка.КоличествоКонечныйОстаток;
			НоваяСтрокаМесто["День"+Строка(ДеньМесяца)] = Строка.КоличествоКонечныйОстаток;			
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Дерево.ТекущийЭлемент = Элементы["ДеревоДень"+Строка(День(Дата))];
	Элементы.Дерево.ТекущаяСтрока = 0;
	
	СписокИдентификаторов.ЗагрузитьЗначения(МассивИдентификаторов);
	Объект.Начало = Дата;
		
КонецПроцедуры //ЗаполнитьДеревоНаСервере()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ОбновитьНаСервере()
	
	ИзменитьКолонкиДереваДни(Элементы.Дерево.ПодчиненныеЭлементы, Дата, ТекущийМесяц, ГраницаТекущегоМесяца, СписокПутейДанных);
	ЗаполнитьДеревоНаСервере();
	
КонецПроцедуры //ОбновитьНаСервере()	

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьДеревоНаСервере();
	РазвернутьСвернутьСтрокиДерева();	
		
КонецПроцедуры //Обновить()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура РазвернутьСвернутьСтрокиДерева(Метод="Развернуть")
	
	Для Каждого ЭлементСписка Из СписокИдентификаторов Цикл
		Если Метод = "Развернуть" Тогда
			Элементы.Дерево.Развернуть(ЭлементСписка.Значение);
		ИначеЕсли Метод = "Свернуть" Тогда
			Элементы.Дерево.Свернуть(ЭлементСписка.Значение);
		Иначе
			ВызватьИсключение("Неожиданный метод!");
		КонецЕсли;		
	КонецЦикла;	
		
КонецПроцедуры //РазвернутьСвернутьСтрокиДерева()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ДеревоОбработкаЗапросаОбновления()
	
	ОбновитьНаСервере();
	РазвернутьСвернутьСтрокиДерева();
	
КонецПроцедуры //ДеревоОбработкаЗапросаОбновления()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьСвернутьСтрокиДерева();
	
КонецПроцедуры //ПриОткрытии()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ДеревоПриАктивизацииПоля(Элемент)
	
	Если СтрНайти(Элемент.ТекущийЭлемент.Имя, "ДеревоДень") > 0 Тогда
		ЧислоВКолонке = Число(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "ДеревоДень", ""));
		Если НЕ День(Дата) = ЧислоВКолонке Тогда
			Дата = Дата(Год(Дата), Месяц(Дата), ЧислоВКолонке);
		КонецЕсли;
		ИзменитьКолонкиДереваДни(Элемент.ПодчиненныеЭлементы, Дата, ТекущийМесяц, ГраницаТекущегоМесяца);
	КонецЕсли;
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ЗаблокироватьПрограмму(Команда)
	
	#Если НЕ Вебклиент Тогда
	ЗаблокироватьРаботуПользователя();
	#КонецЕсли
	
КонецПроцедуры //ЗаблокироватьПрограмму()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если СтрНайти(Поле.Имя, "День") > 0 Тогда
		СтрокаЗначенийДерево = Дерево.НайтиПоИдентификатору(ВыбраннаяСтрока);
		ЗначениеВЯчейке = СтрокаЗначенийДерево[СтрЗаменить(СписокПутейДанных.НайтиПоЗначению(Поле.Имя).Представление, Элемент.Имя + ".", "")];
		Если ЗначениеВЯчейке > 0 Тогда
			Объект.Начало = Дата;
			Если ТипЗнч(СтрокаЗначенийДерево.Размещение) = Тип("СправочникСсылка.СредстваРазмещения") Тогда
				Объект.СредствоРазмещения = СтрокаЗначенийДерево.Размещение;	
			ИначеЕсли ТипЗнч(СтрокаЗначенийДерево.Размещение) = Тип("СправочникСсылка.ЭтажиСредствРазмещения") Тогда	
				Объект.СредствоРазмещения = СтрокаЗначенийДерево.ПолучитьРодителя().Размещение;
				Объект.ЭтажСредстваРазмещения = СтрокаЗначенийДерево.Размещение;	
			ИначеЕсли ТипЗнч(СтрокаЗначенийДерево.Размещение) = Тип("СправочникСсылка.КомнатыСредствРазмещения") Тогда
				Объект.СредствоРазмещения = СтрокаЗначенийДерево.ПолучитьРодителя().ПолучитьРодителя().Размещение;
				Объект.ЭтажСредстваРазмещения = СтрокаЗначенийДерево.ПолучитьРодителя().Размещение;
				Объект.МестаРазмещения.Очистить();
				СтрокаТЧМеста = Объект.МестаРазмещения.Добавить();
				СтрокаТЧМеста.КомнатаСредстваРазмещения = СтрокаЗначенийДерево.Размещение;
				Комната = СтрокаЗначенийДерево.Размещение;
			ИначеЕсли ТипЗнч(СтрокаЗначенийДерево.Размещение) = Тип("СправочникСсылка.МестаРазмещения") Тогда
				Объект.СредствоРазмещения = СтрокаЗначенийДерево.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя().Размещение;
				Объект.ЭтажСредстваРазмещения = СтрокаЗначенийДерево.ПолучитьРодителя().ПолучитьРодителя().Размещение;
				Комната = СтрокаЗначенийДерево.ПолучитьРодителя().Размещение;
				Объект.МестаРазмещения.Очистить();
				СтрокаТЧМеста = Объект.МестаРазмещения.Добавить();
				СтрокаТЧМеста.КомнатаСредстваРазмещения = Комната;
				Место = СтрокаЗначенийДерево.Размещение;
				СтрокаТЧМеста.МестоРазмещения = Место;
			КонецЕсли;
			
			Уникальность = Новый Структура("СредствоРазмещения, ЭтажСредстваРазмещения, КомнатаМестаРазмещения, Месторазмещения, Начало", Объект.СредствоРазмещения, Объект.ЭтажСредстваРазмещения, Комната, Место, Объект.Начало);
			СтруктураПараметров = Новый Структура("ЗакрыватьПриЗакрытииВладельца, СредствоРазмещения, ЭтажСредстваРазмещения, КомнатаМестаРазмещения, Месторазмещения, Начало, МаксимальноеКоличествоМест", 
			Истина, Объект.СредствоРазмещения, Объект.ЭтажСредстваРазмещения, Комната, Место, Объект.Начало, ЗначениеВЯчейке);
			ОткрытьФорму("Обработка.ДоскаЗаказов.Форма.ОперативноеБронирование", СтруктураПараметров, ЭтаФорма, Уникальность, , , Новый ОписаниеОповещения(), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ДеревоВыбор
